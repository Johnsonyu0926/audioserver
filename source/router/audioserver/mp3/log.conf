// main.cpp
#include "easylogging++.h"
#include <iostream>
#include <string>
#include <filesystem>

INITIALIZE_EASYLOGGINGPP

void initializeLogging() {
    // 假设配置文件与可执行文件在同一目录
    std::filesystem::path configPath = std::filesystem::current_path() / "log.conf";
    
    if (!std::filesystem::exists(configPath)) {
        std::cerr << "Log configuration file not found: " << configPath << std::endl;
        return;
    }

    try {
        el::Configurations conf(configPath.string());
        el::Loggers::reconfigureAllLoggers(conf);
        
        // 设置最大日志文件大小
        el::Loggers::addFlag(el::LoggingFlag::StrictLogFileSizeCheck);
        el::Helpers::setMaxLogFileSize(10 * 1024 * 1024); // 10MB

        // 设置日志刷新阈值
        el::Loggers::addFlag(el::LoggingFlag::ImmediateFlush);
        el::Helpers::setFlushInterval(5);

        LOG(INFO) << "Logging system initialized with config from " << configPath;
    } catch (const std::exception& e) {
        std::cerr << "Error initializing logging system: " << e.what() << std::endl;
    }
}

/*
// 示例函数，用于演示不同级别的日志
void exampleFunction() {
    LOG(DEBUG) << "This is a debug message";
    LOG(INFO) << "This is an info message";
    LOG(WARNING) << "This is a warning message";
    LOG(ERROR) << "This is an error message";
}

int main(int argc, char* argv[]) {
    START_EASYLOGGINGPP(argc, argv);
    initializeLogging();

    LOG(INFO) << "Application started";

    exampleFunction();

    // 模拟一些程序逻辑
    for (int i = 0; i < 10; ++i) {
        LOG(INFO) << "Processing item " << i;
        // 模拟一些处理...
    }

    LOG(INFO) << "Application finished";

    return 0;
}

要编译和运行这个程序，您需要：
确保 Easylogging++ 库已正确安装和配置在您的项目中。
在与 `main.cpp` 相同的目录下创建一个名为 `log.conf` 的文件，内容如下：
* GLOBAL:
   FORMAT               =  "%datetime{%Y-%M-%d %H:%m:%s.%g} %level [%fbase:%line] %msg"
   FILENAME             =  "/var/log/audioserver.log"
   ENABLED              =  true
   TO_FILE              =  true
   TO_STANDARD_OUTPUT   =  true
   SUBSECOND_PRECISION  =  3
   MAX_LOG_FILE_SIZE    =  10485760
   LOG_FLUSH_THRESHOLD  =  5
* DEBUG:
   FORMAT               = "%datetime{%Y-%M-%d %H:%m:%s.%g} %level [%fbase:%line] %msg"
   TO_FILE              =  true
   TO_STANDARD_OUTPUT   =  false

编译程序。如果使用 g++，可以使用类似以下的命令：
g++ -std=c++17 -I/path/to/easylogging/include main.cpp /path/to/easylogging/src/easylogging++.cc -o audioserver

运行程序：
./audioserver

这个程序将：
初始化日志系统并加载配置。
输出一些示例日志消息到文件和/或标准输出（根据配置）。
DEBUG 级别的消息只会写入文件，不会输出到标准输出。
其他级别的消息会同时写入文件和输出到标准输出。
日志文件将被限制在 10MB 大小。
每 5 条消息会刷新一次日志缓存。
请注意，您可能需要调整日志文件的路径（`/var/log/audioserver.log`），确保程序有权限写入该位置。如果没有权限，可以将路径更改为当前目录或其他有写入权限的位置。

这个示例提供了一个基本框架，您可以根据需要进一步扩展和定制日志功能。*/